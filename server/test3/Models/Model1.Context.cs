//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test3.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BoardRoomEntities : DbContext
    {
        public BoardRoomEntities()
            : base("name=BoardRoomEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int CancelBookings(Nullable<int> bookingID, Nullable<int> userID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelBookings", bookingIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<GetBookingsForAllRooms_Result> GetBookingsForAllRooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingsForAllRooms_Result>("GetBookingsForAllRooms");
        }
    
        public virtual ObjectResult<GetBookingsForRoomR_Result> GetBookingsForRoomR(Nullable<int> roomID)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingsForRoomR_Result>("GetBookingsForRoomR", roomIDParameter);
        }
    
        public virtual ObjectResult<GetBookingsForRoomU_Result> GetBookingsForRoomU(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingsForRoomU_Result>("GetBookingsForRoomU", userIDParameter);
        }
    
        public virtual int UpdateCompleteBookings(Nullable<int> bookingID, Nullable<int> userID)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCompleteBookings", bookingIDParameter, userIDParameter);
        }
    
        public virtual int UpdatePassedBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassedBookings");
        }
    
        public virtual ObjectResult<Nullable<int>> Login(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Login", usernameParameter, passParameter);
        }
    
        public virtual int AddBooking(Nullable<int> userID, Nullable<int> roomID, Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var startParameter = start.HasValue ?
                new ObjectParameter("Start", start) :
                new ObjectParameter("Start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("End", end) :
                new ObjectParameter("End", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBooking", userIDParameter, roomIDParameter, startParameter, endParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Login1(string username, string pass)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Login1", usernameParameter, passParameter);
        }
    
        public virtual ObjectResult<GetBookingsForRoomR1_Result> GetBookingsForRoomR1(Nullable<int> roomID, Nullable<System.DateTime> date)
        {
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookingsForRoomR1_Result>("GetBookingsForRoomR1", roomIDParameter, dateParameter);
        }
    }
}
